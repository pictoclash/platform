// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: character.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const getTestUser = `-- name: GetTestUser :one
SELECT users.id, users.username, users.bio, users.pronouns_id, users.custom_pronouns, pronouns.id, pronouns.subject_pronoun, pronouns.object_pronoun
FROM users
INNER JOIN pronouns ON users.pronouns_id=pronouns.id
LIMIT 1
`

type GetTestUserRow struct {
	User    User    `json:"user"`
	Pronoun Pronoun `json:"pronoun"`
}

func (q *Queries) GetTestUser(ctx context.Context) (*GetTestUserRow, error) {
	row := q.db.QueryRowContext(ctx, getTestUser)
	var i GetTestUserRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Username,
		&i.User.Bio,
		&i.User.PronounsID,
		&i.User.CustomPronouns,
		&i.Pronoun.ID,
		&i.Pronoun.SubjectPronoun,
		&i.Pronoun.ObjectPronoun,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT users.id, users.username, users.bio, users.pronouns_id, users.custom_pronouns, pronouns.id, pronouns.subject_pronoun, pronouns.object_pronoun
  FROM users
  INNER JOIN pronouns ON users.pronouns_id=pronouns.id
  WHERE users.id=$1
`

type GetUserRow struct {
	User    User    `json:"user"`
	Pronoun Pronoun `json:"pronoun"`
}

// SELECT users.*, pronouns.subject_pronoun, pronouns.object_pronoun
func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (*GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Username,
		&i.User.Bio,
		&i.User.PronounsID,
		&i.User.CustomPronouns,
		&i.Pronoun.ID,
		&i.Pronoun.SubjectPronoun,
		&i.Pronoun.ObjectPronoun,
	)
	return &i, err
}
